---
layout: guide
title: Core Types
cat: guide
sidebar: reference_mapping
---

p. Each JSON field can be mapped to a specific core type. JSON itself already provides us with some typing, with its support for @string@, @integer@/@long@, @float@/@double@, @boolean@, and @null@.

p. The following sample tweet JSON document will be used to explain the core types:

<pre class="prettyprint lang-js">
{
    "tweet" {
        "user" : "kimchy"
        "message" : "This is a tweet!",
        "postDate" : "2009-11-15T14:12:12",
        "priority" : 4,
        "rank" : 12.3
    }
}
</pre>

p. Explicit mapping for the above JSON tweet can be:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "user" : {"type" : "string", "index" : "not_analyzed"},
            "message" : {"type" : "string", "null_value" : "na"},
            "postDate" : {"type" : "date"},
            "priority" : {"type" : "integer"},
            "rank" : {"type" : "float"}
        }
    }
}
</pre>


h1. String

p. The text based string type is the most basic type, and contains one or more characters. An example mapping can be:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "message" : {
                "type" : "string",
                "store" : "yes",
                "index" : "analyzed",
                "null_value" : "na"
            }
        }
    }
}
</pre>

p. The above mapping defines a @string@ @message@ property/field within the @tweet@ type. The field is stored in the index (so it can later be retrieved using selective loading when searching), and it gets analyzed (broken down into searchable terms). If the message has a @null@ value, then the value that will be stored is @na@.

p. The following table lists all the attributes that can be used with the @string@ type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @analyzed@ for the field to be indexed and searchable after being broken down into token using an analyzer. @not_analyzed@ means that its still searchable, but does not go through any analysis process or broken down into tokens. @no@ means that it won't be searchable at all (as an individual field; it may still be included in @_all@). Defaults to @analyzed@.|
|@term_vector@|Possible values are @no@, @yes@, @with_offsets@, @with_positions@, @with_positions_offsets@. Defaults to @no@.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@omit_norms@|Boolean value if norms should be omitted or not. Defaults to @false@ for @analyzed@ fields, and to @true@ for @not_analyzed@ fields.|
|@omit_term_freq_and_positions@|Boolean value if term freq and positions should be omitted. Defaults to @false@. Deprecated since 0.20, see @index_options@.|
|@index_options@|Allows to set the indexing options, possible values are @docs@ (only doc numbers are indexed), @freqs@ (doc numbers and term frequencies), and @positions@ (doc numbers, term frequencies and positions). Defaults to @positions@ for @analyzed@ fields, and to @docs@ for @not_analyzed@ fields. Since 0.20.|
|@analyzer@|The analyzer used to analyze the text contents when @analyzed@ during indexing and when searching using a query string. Defaults to the globally configured analyzer.|
|@index_analyzer@|The analyzer used to analyze the text contents when @analyzed@ during indexing.|
|@search_analyzer@|The analyzer used to analyze the field when part of a query string. Can be updated on an existing field.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). Defaults to @true@ or to the parent @object@ type setting.|
|@ignore_above@|The analyzer will ignore strings larger than this size. Useful for generic @not_analyzed@ fields that should ignore long text. (since @0.19.9).|
|@position_offset_gap@|Position increment gap between field instances with the same field name. Defaults to 0.|

p. The @string@ type also support custom indexing parameters associated with the indexed value. For example:

<pre class="prettyprint lang-js">
{
    "message" : {
        "_value":  "boosted value",
        "_boost":  2.0
    }
}
</pre>

p. The mapping is required to disambiguate the meaning of the document. Otherwise, the structure would interpret "message" as a value of type "object". The key @_value@ (or @value@) in the inner document specifies the real string content that should eventually be indexed. The @_boost@ (or @boost@) key specifies the per field document boost (here 2.0).

h1. Number

p. A number based type supporting @float@, @double@, @byte@, @short@, @integer@, and @long@. It uses specific constructs within Lucene in order to support numeric values. The number types have the same ranges as corresponding "Java types":http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html. An example mapping can be:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "rank" : {
                "type" : "float",
                "null_value" : 1.0
            }
        }
    }
}
</pre>

p. The following table lists all the attributes that can be used with a numbered type:

|_. Attribute |_. Description |
|@type@|The type of the number. Can be @float@, @double@, @integer@, @long@, @short@, @byte@. Required.|
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @no@ if the value should not be indexed. In this case, @store@ should be set to @yes@, since if it's not indexed and not stored, there is nothing to do with it.|
|@precision_step@|The precision step (number of terms generated for each number value). Defaults to @4@.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). Defaults to @true@ or to the parent @object@ type setting.|
|@ignore_malformed@|Ignored a malformed number. Defaults to @false@. (Since @0.19.9).|

h1. Date

p. The date type is a special type which maps to JSON string type. It follows a specific format that can be explicitly set. All dates are @UTC@. Internally, a date maps to a number type @long@, with the added parsing stage from string to long and from long to string. An example mapping:

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "postDate" : {
                "type" : "date",
                "format" : "YYYY-MM-dd"
            }
        }
    }
}
</pre>

p. The date type will also accept a long number representing UTC milliseconds since the epoch, regardless of the format it can handle.

p. The following table lists all the attributes that can be used with a date type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@format@|The "date format":/guide/reference/mapping/date-format.html. Defaults to @dateOptionalTime@.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @no@ if the value should not be indexed. In this case, @store@ should be set to @yes@, since if it's not indexed and not stored, there is nothing to do with it.|
|@precision_step@|The precision step (number of terms generated for each number value). Defaults to @4@.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). Defaults to @true@ or to the parent @object@ type setting.|
|@ignore_malformed@|Ignored a malformed number. Defaults to @false@. (Since @0.19.9).|

h1. Boolean

p. The boolean type Maps to the JSON boolean type. It ends up storing within the index either @T@ or @F@, with automatic translation to @true@ and @false@ respectively.

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "hes_my_special_tweet" : {
                "type" : "boolean",
            }
        }
    }
}
</pre>

p. The boolean type also supports passing the value as a number (in this case @0@ is @false@, all other values are @true@).

p. The following table lists all the attributes that can be used with the boolean type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|
|@store@|Set to @yes@ to store actual field in the index, @no@ to not store it. Defaults to @no@ (note, the JSON document itself is stored, and it can be retrieved from it).|
|@index@|Set to @no@ if the value should not be indexed. In this case, @store@ should be set to @yes@, since if it's not indexed and not stored, there is nothing to do with it.|
|@boost@|The boost value. Defaults to @1.0@.|
|@null_value@|When there is a (JSON) null value for the field, use the @null_value@ as the field value. Defaults to not adding the field at all.|
|@include_in_all@|Should the field be included in the @_all@ field (if enabled). Defaults to @true@ or to the parent @object@ type setting.|

h1. Binary

p. The binary type is a base64 representation of binary data that can be stored in the index. The field is stored by default and not indexed at all.

<pre class="prettyprint lang-js">
{
    "tweet" : {
        "properties" : {
            "image" : {
                "type" : "binary",
            }
        }
    }
}
</pre>

p. The following table lists all the attributes that can be used with the binary type:

|_. Attribute |_. Description |
|@index_name@|The name of the field that will be stored in the index. Defaults to the property/field name.|

h1. Fielddata filters

p. It is possible to control which field values are loaded into memory, which is particularly useful for faceting on string fields, using fielddata filters, which are explained in detail in the "Fielddata":/guide/reference/index-modules/fielddata.html section.

p. Fielddata filters can exclude terms which do not match a regex, or which don't fall between a @min@ and @max@ frequency range:

<pre class="prettyprint lang-js">
{
    tweet: {
        type:      "string",
        analyzer:  "whitespace"
        fielddata: {
            filter: {
                regex:                "^#.*",
                frequency: {
                    min:              0.001,
                    max:              0.1,
                    min_segment_size: 500
                }
            }
        }
    }
}
</pre>

p. These filters can be updated on an existing field mapping and will take effect the next time the fielddata for a segment is loaded. Use the "Clear Cache":/guide/reference/api/admin-indices-clearcache.html API to reload the fielddata using the new filters. 

h1. Postings format

p. Posting formats define how fields are written into the index and how fields are represented into memory. Posting formats can be defined per field via the @postings_format@ option. Postings format are configurable since version @0.90.0.Beta1@. Elasticsearch has several builtin formats:
* @direct@ - A postings format that uses disk-based storage but loads its terms and postings directly into memory. Note this postings format is very memory intensive and has certain limitation that don't allow segments to grow beyond 2.1GB see {@link DirectPostingsFormat} for details.
* @memory@ - A postings format that stores its entire terms, postings, positions and payloads in a finite state transducer. This format should only be used for primary keys or with fields where each term is contained in a very low number of documents.
* @pulsing@ - A postings format in-lines the posting lists for very low frequent terms in the term dictionary. This is useful to improve lookup performance for low-frequent terms.
* @bloom_default@ - A postings format that uses a bloom filter to improve term lookup performance. This is useful for primarily keys or fields that are used as a delete key.
* @bloom_pulsing@ - A postings format that combines the advantages of <b>bloom</b> and <b>pulsing</b> to further improve lookup performance.
* @default@: The default Elasticsearch postings format offering best general purpose performance. This format is used if no postings format is specified in the field mapping.

h3. Postings format example

p. On all field types it possible to configure a @postings_format@ attribute:

<pre class="prettyprint lang-js">
{
  "person" : {
     "properties" : {
         "second_person_id" : {"type" : "string", "postings_format" : "pulsing"}
     }
  }
}
</pre>

p. On top of using the built-in posting formats it is possible define custom postings format. See "codec module":/guide/reference/index-modules/codec.html for more information.

h1. Similarity

p. From version @0.90.Beta1@ Elasticsearch includes changes from Lucene 4 that allows you to configure a similarity (scoring algorithm) per field. Allowing users a simpler extension beyond the usual TF/IDF algorithm. As part of this, new algorithms have been added including BM25. Also as part of the changes, it is now possible to define a Similarity per field, giving even greater control over scoring.

p. You can configure similarities via the "similarity module":/guide/reference/index-modules/similarity.html

h3. Configuring Similarity per Field

p. Defining the Similarity for a field is done via the @similarity@ mapping property, as this example shows:

<pre class="prettyprint lang-js">
{
  "book" : {
    "properties" : {
      "title" : { "type" : "string", "similarity" : "BM25" }
    }
}
</pre>

p. The following Similarities are configured out-of-box:
* @default@ - The Default TF/IDF algorithm used by Elasticsearch and Lucene in previous versions.
* @BM25@ - The BM25 algorithm. "See Okapi_BM25":http://en.wikipedia.org/wiki/Okapi_BM25 for more details.
