---
layout: guide
title: Search API - Suggest
cat: guide
sidebar: reference_api_search
---

h1. Suggest feature

p. The suggest feature suggests similar looking terms based on a provided text by using a suggester. The suggest feature is available from version @0.90.0.Beta1@. The suggest feature is still under development and will evolve  once we move the @0.90.0@ GA release.

h1. Suggest API

p. The suggest request part is either defined alongside the query part in a `_search` request or via the REST `_suggest` endpoint.

<pre class="prettyprint lang-js">
curl -s -XPOST 'localhost:9200/_search' -d '{
  "query" : {
    ...
  },
  "suggest" : {
    ...
  }
}' 
</pre>

p. Suggest requests executed against the `_suggest` endpoint should omit the surrounding `suggest` element which is only used if the suggest request is part of a search.

<pre class="prettyprint lang-js">
curl -XPOST 'localhost:9200/_suggest' -d '{
  "my-suggestion" : {
    "text" : "the amsterdma meetpu",
    "term" : {
      "field" : "body"
    }
  }
}'
</pre>

p. Several suggestions can be specified per request. Each suggestion is identified with an arbitrary name. In the example below two suggestions are requested. Both @my-suggest-1@ and @my-suggest-2@ suggestions use the @term@ suggester, but have a different @text@. 

<pre class="prettyprint lang-js">
"suggest" : {
  "my-suggest-1" : {
    "text" : "the amsterdma meetpu",
    "term" : {
      "field" : "body"
    }
  },
  "my-suggest-2" : {
    "text" : "the rottredam meetpu",
    "term" : {
      "field" : "title",
    }
  }
}
</pre>

p. The below suggest response example includes the suggestion response for @my-suggest-1@ and @my-suggest-2@. Each suggestion part contains entries. Each entry is effectively a token from the suggest text and contains the suggestion entry text, the original start offset and length in the suggest text and if found an arbitrary number of options.

<pre class="prettyprint lang-js">
{
  ...
  "suggest": {
    "my-suggest-1": [
      {
        "text" : "amsterdma",
        "offset": 4,
        "length": 9,
        "options": [
           ...
        ]
      },     
      ...       
    ],
    "my-suggest-2" : [
      ... 
    ]
  }
  ...
}
</pre>    
 
p. Each options array contains a option object that includes the suggested text, its document frequency and score compared to the suggest entry text. The meaning of the score depends on the used suggester. The term suggester's score is based on the edit distance.

<pre class="prettyprint lang-js">
"options": [
  {
    "text": "amsterdam",
    "freq": 77,
    "score": 0.8888889
  },
  ...
]  
</pre>

h1. Global suggest text

p. To avoid repitition of the suggest text, it is possible to define a global text. In the example below the suggest text is defined globally and applies to the @my-suggest-1@ and @my-suggest-2@ suggestions.

<pre class="prettyprint lang-js">
"suggest" : {
  "text" : "the amsterdma meetpu"
  "my-suggest-1" : {
    "term" : {
      "field" : "title"
    }
  },
  "my-suggest-2" : {
    "term" : {
      "field" : "body"
    }
  }
}
</pre>

p. The suggest text can in the above example also be specified as suggestion specific option. The suggest text specified on suggestion level override the suggest text on the global level.

h1. Other suggest example.

p. In the below example we request suggestions for the following suggest text: @devloping distibutd saerch engies@ on the @title@ field with a maximum of 3 suggestions per term inside the suggest text. Note that in this example we use the @count@ search type. This isn't required, but a nice optimization. The suggestions are gather in the @query@ phase and in the case that we only care about suggestions (so no hits) we don't need to execute the @fetch@ phase.

<pre class="prettyprint lang-js">
curl -s -XPOST 'localhost:9200/_search?search_type=count' -d '{
  "suggest" : {
    "my-title-suggestions-1" : {
      "text" : "devloping distibutd saerch engies",
      "term" : {
        "size" : 3,
        "field" : "title"  
      }
    }
  }
}'
</pre>

p. The above request could yield the response as stated in the code example below. As you can see if we take the first suggested options of each suggestion entry we get @developing distributed search engines@ as result.

<pre class="prettyprint lang-js">
{
  ...
  "suggest": {
    "my-title-suggestions-1": [
      {
        "text": "devloping",
        "offset": 0,
        "length": 9,
        "options": [
          {
            "text": "developing",
            "freq": 77,
            "score": 0.8888889
          },
          {
            "text": "deloping",
            "freq": 1,
            "score": 0.875
          },
          {
            "text": "deploying",
            "freq": 2,
            "score": 0.7777778
          }
        ]
      },
      {
        "text": "distibutd",
        "offset": 10,
        "length": 9,
        "options": [
          {
            "text": "distributed",
            "freq": 217,
            "score": 0.7777778
          },
          {
            "text": "disributed",
            "freq": 1,
            "score": 0.7777778
          },
          {
            "text": "distribute",
            "freq": 1,
            "score": 0.7777778
          }
        ]
      },
      {
        "text": "saerch",
        "offset": 20,
        "length": 6,
        "options": [
          {
            "text": "search",
            "freq": 1038,
            "score": 0.8333333
          },
          {
            "text": "smerch",
            "freq": 3,
            "score": 0.8333333
          },
          {
            "text": "serch",
            "freq": 2,
            "score": 0.8
          }
        ]
      },
      {
        "text": "engies",
        "offset": 27,
        "length": 6,
        "options": [
          {
            "text": "engines",
            "freq": 568,
            "score": 0.8333333
          },
          {
            "text": "engles",
            "freq": 3,
            "score": 0.8333333
          },
          {
            "text": "eggies",
            "freq": 1,
            "score": 0.8333333
          }
        ]
      }
    ]
  }
  ...
}
</pre>

h1. Term suggester

p. The @term@ suggester suggests terms based on edit distance. The provided suggest text is analyzed before terms are suggested. The suggested terms are provided per analyzed suggest text token. The @term@ suggester doesn't take the query into account that is part of request. 

h1. Common suggest options:
* @text@ - The suggest text. The suggest text is a required option that needs to be set globally or per suggestion.

h1. Common term suggest options
* @field@ - The field to fetch the candidate suggestions from. This is an required option that either needs to be set globally or per suggestion.
* @analyzer@ - The analyzer to analyse the suggest text with. Defaults to the search analyzer of the suggest field.
* @size@ - The maximum corrections to be returned per suggest text token.
* @sort@ - Defines how suggestions should be sorted per suggest text term. Two possible value:
** @score@ - Sort by sore first, then document frequency and then the term itself.
** @frequency@ - Sort by document frequency first, then similarity score and then the term itself.
* @suggest_mode@ - The suggest mode controls what suggestions are included or controls for what suggest text terms, suggestions should be suggested. Three possible values can be specified:
** @missing@ - Only suggest terms in the suggest text that aren't in the index. This is the default.
** @popular@ - Only suggest suggestions that occur in more docs then the original suggest text term.
** @always@ - Suggest any matching suggestions based on terms in the suggest text.

h1. Other term suggest options:
* @lowercase_terms@ - Lower cases the suggest text terms after text analyzation.
* @max_edits@ - The maximum edit distance candidate suggestions can have in order to be considered as a suggestion. Can only be a value between 1 and 2. Any other value result in an bad request error being thrown. Defaults to 2.
* @prefix_len@ - The number of minimal prefix characters that must match in order be a candidate suggestions. Defaults to 1. Increasing this number improves spellcheck performance. Usually misspellings don't occur in the beginning of terms.
* @min_word_len@ -  The minimum length a suggest text term must have in order to be included. Defaults to 4.
* @shard_size@ - Sets the maximum number of suggestions to be retrieved from each individual shard. During the reduce phase only the top N suggestions are returned based on the `size` option. Defaults to the `size` option. Setting this to a value higher than the `size` can be useful in order to get a more accurate document frequency for spelling corrections at the cost of performance. Due to the fact that terms are partitioned amongst shards, the shard level document frequencies of spelling corrections may not be precise. Increasing this will make these document frequencies more precise.
* @max_inspections@ - A factor that is used to multiply with the `shards_size` in order to inspect more candidate spell corrections on the shard level. Can improve accuracy at the cost of performance. Defaults to 5.
* @min_doc_freq@ - The minimal threshold in number of documents a suggestion should appear in. This can be specified as an absolute number or as a relative percentage of number of documents. This can improve quality by only suggesting high frequency terms. Defaults to 0f and is not enabled. If a value higher than 1 is specified then the number cannot be fractional. The shard level document frequencies are used for this option.
* @max_term_freq@ - The maximum threshold in number of documents a suggest text token can exist in order to be included. Can be a relative percentage number (e.g 0.4) or an absolute number to represent document frequencies. If an value higher than 1 is specified then fractional can not be specified. Defaults to 0.01f. This can be used to exclude high frequency terms from being spellchecked. High frequency terms are usually spelled correctly on top of this also improves the spellcheck performance.  The shard level document frequencies are used for this option.



h1. Phrase Suggester

p. The @term@ suggester provides a very convenient API to access word alternatives on token basis within a certain string distance. The API allows accessing each token in the stream individually while suggest-selection is left to the API consumer. Yet, often pre-selected suggestions are required in order to present to the end-user. The @phrase@ suggester adds additional logic on top of the @term@ suggester to select entire corrected phrases instead of individual tokens weighted based on @ngram-langugage models@. In practice it this suggester will be able to make better decision about which tokens to pick based on co-occurence and frequencies.

h2. API Example

p. The @phrase@ request is defined along side the query part in the json request:

<pre class="prettyprint lang-js">
curl -XPOST 'localhost:9200/_search' -d {
  "suggest" : {
    "text" : "Xor the Got-Jewel",
    "simple_phrase" : {
      "phrase" : {
        "analyzer" : "body",
        "field" : "bigram",
        "size" : 1,
        "real_word_error_likelihood" : 0.95,
        "max_errors" : 0.5,
        "gram_size" : 2,
        "direct_generator" : [ {
          "field" : "body",
          "suggest_mode" : "always",
          "min_word_len" : 1
        } ]
      }
    }
  }
}
</pre>

p. The response contains suggested sored by the most likely spell correction first. In this case we got the expected correction @xorr the god jewel@ first while the second correction is less conservative where only one of the errors is corrected. Note, the request is executed with @max_errors@ set to @0.5@ so 50% of the terms can contain misspellings (See parameter descriptions below).

<pre class="prettyprint lang-js">
  {
  "took" : 5,
  "timed_out" : false,
  "_shards" : {
    "total" : 5,
    "successful" : 5,
    "failed" : 0
  },
  "hits" : {
    "total" : 2938,
    "max_score" : 0.0,
    "hits" : [ ]
  },
  "suggest" : {
    "simple_phrase" : [ {
      "text" : "Xor the Got-Jewel",
      "offset" : 0,
      "length" : 17,
      "options" : [ {
        "text" : "xorr the god jewel",
        "score" : 0.17877324
      }, {
        "text" : "xor the god jewel",
        "score" : 0.14231323
      } ]
    } ]
  }
}
</pre>

h1. Basic Phrase suggest API  parameters

* @field@ - the name of the field used to do n-gram lookups for the language model, the suggester will use this field to gain statistics to score corrections. This field is mandatory.
* @gram_size@ - sets max size of the n-grams (shingles) in the @field@. If the field doesn't contain n-grams (shingles) this should be omitted or set to @1@. Note that Elasticsearch tries to detect the gram size based on the specified @field@. If the field uses a @shingle@ filter the @gram_size@ is set to the @max_shingle_size@ if not explicitly set.
* @real_word_error_likelihood@ - the likelihood of a term being a misspelled even if the term exists in the dictionary. The default it @0.95@ corresponding to 5% or the real words are misspelled.
* @confidence@ - The confidence level defines a factor applied to the input phrases score which is used as a threshold for other suggest candidates. Only candidates that score higher than the threshold will be included in the result. For instance a confidence level of @1.0@ will only return suggestions that score higher than the input phrase. If set to @0.0@ the top N candidates are returned. The default is @1.0@.
* @max_errors@ - the maximum percentage of the terms that at most considered to be misspellings in order to form a correction. This method accepts a float value in the range @[0..1)@ as a fraction of the actual query terms a number @>=1@ as an absolute number of query terms. The default is set to @1.0@ which corresponds to that only corrections with at most 1 misspelled term are returned.
* @separator@ - the separator that is used to separate terms in the bigram field. If not set the whitespace character is used as a separator.
* @size@ - the number of candidates that are generated for each individual query term Low numbers like @3@ or @5@ typically produce good results. Raising this can bring up terms with higher edit distances. The default is @5@.
* @analyzer@ -  Sets the analyzer to analyse to suggest text with. Defaults to the search analyzer of the suggest field passed via @field@.
* @shard_size@ - Sets the maximum number of suggested term to be retrieved from each individual shard. During the reduce phase, only the top N suggestions are returned based on the @size@ option. Defaults to @5@.
* @text@ - Sets the text / query to provide suggestions for.

h2. Smoothing Models

The @phrase@ suggester supports multiple smoothing models to balance weight between infrequent grams (grams (shingles) are not existing in the index) and frequent grams (appear at least once in the index).
* @stupid_backoff@ - a simple backoff model that backs off to lower order n-gram models if the higher order count is @0@ and discounts the lower order n-gram model by a constant factor. The default @discount@ is @0.4@. Stupid Backoff is the default model.
* @laplace@ - a smoothing model that uses an additive smoothing where a constant (typically @1.0@ or smaller) is added to all counts to balance weights, The default @alpha@ is @0.5@.
* @linear_interpolation@ - a smoothing model that takes the weighted mean of the unigrams, bigrams and trigrams based on user supplied weights (lambdas). Linear Interpolation doesn't have any default values. All parameters (@trigram_lambda@, @bigram_lambda@, @unigram_lambda@) must be supplied.

h2. Candidate Generators

p. The @phrase@ suggester uses candidate generators to produce a list of possible terms per term in the given text. A single candidate generator is similar to a @term@ suggester called for each individual term in the text. The output of the generators is subsequently scored in combination with the candidates from the other terms to for suggestion candidates.
Currently only one type of candidate generator is supported, the @direct_generator@. The Phrase suggest API accepts a list of generators under the key @direct_generator@ each of the generators in the list are called per term in the original text.


h2. Direct Generators

p. The direct generators support the following parameters:

* @field@ - The field to fetch the candidate suggestions from. This is an required option that either needs to be set globally or per suggestion.
* @size@ - The maximum corrections to be returned per suggest text token.
* @suggest_mode@ - The suggest mode controls what suggestions are included or controls for what suggest text terms, suggestions should be suggested. Three possible values can be specified:
** @missing@ - Only suggest terms in the suggest text that aren't in the index. This is the default.
** @popular@ - Only suggest suggestions that occur in more docs then the original suggest text term.
** @always@ - Suggest any matching suggestions based on terms in the suggest text.
* @max_edits@ - The maximum edit distance candidate suggestions can have in order to be considered as a suggestion. Can only be a value between 1 and 2. Any other value result in an bad request error being thrown. Defaults to 2.
* @prefix_length@ - The number of minimal prefix characters that must match in order be a candidate suggestions. Defaults to 1. Increasing this number improves spellcheck performance. Usually misspellings don't occur in the beginning of terms.
* @min_word_len@ -  The minimum length a suggest text term must have in order to be included. Defaults to 4.
* @max_inspections@ - A factor that is used to multiply with the @shards_size@ in order to inspect more candidate spell corrections on the shard level. Can improve accuracy at the cost of performance. Defaults to 5.
* @min_doc_freq@ - The minimal threshold in number of documents a suggestion should appear in. This can be specified as an absolute number or as a relative percentage of number of documents. This can improve quality by only suggesting high frequency terms. Defaults to 0f and is not enabled. If a value higher than 1 is specified then the number cannot be fractional. The shard level document frequencies are used for this option.
* @max_term_freq@ - The maximum threshold in number of documents a suggest text token can exist in order to be included. Can be a relative percentage number (e.g 0.4) or an absolute number to represent document frequencies. If an value higher than 1 is specified then fractional can not be specified. Defaults to 0.01f. This can be used to exclude high frequency terms from being spellchecked. High frequency terms are usually spelled correctly on top of this also improves the spellcheck performance.  The shard level document frequencies are used for this option.
* @pre_filter@ - a filter (analyzer) that is applied to each of the tokens passed to this candidate generator. This filter is applied to the original token before candidates are generated. 
* @post_filter@ - a filter (analyzer) that is applied to each of the generated tokens before they are passed to the actual phrase scorer. 

The following example shows a @phrase@ suggest call with two generators, the first one is using a field containing ordinary indexed terms and the second one uses a field that uses
terms indexed with a @reverse@ filter (tokens are index in reverse order). This is used to overcome the limitation of the direct generators to require a constant prefix to provide high-performance suggestions. The @pre_filter@ and @post_filter@ options accept ordinary analyzer names.

<pre class="prettyprint lang-js">
curl -s -XPOST 'localhost:9200/_search' -d {
 "suggest" : {
    "text" : "Xor the Got-Jewel",
    "simple_phrase" : {
      "phrase" : {
        "analyzer" : "body",
        "field" : "bigram",
        "size" : 4,
        "real_word_error_likelihood" : 0.95,
        "confidence" : 2.0,
        "gram_size" : 2,
        "direct_generator" : [ {
          "field" : "body",
          "suggest_mode" : "always",
          "min_word_len" : 1
        }, {
          "field" : "reverse",
          "suggest_mode" : "always",
          "min_word_len" : 1,
          "pre_filter" : "reverse",
          "post_filter" : "reverse"
        } ]
      }
    }
  }
}
</pre>

@pre_filter@ and @post_filter@ can also be used to inject synonyms after candidates are generated. For instance for the query @captain usq@ we might generate a candidate @usa@ for term @usq@ which is a synonym for @america@ which allows to present @captain america@ to the user if this phrase scores high enough.
